#!/usr/bin/env python

import os
import sys
import logging

import mapzen.whosonfirst.placetypes
import mapzen.whosonfirst.bundles

if __name__ == '__main__':

    import optparse

    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='Where the actual WOF data lives')
    opt_parser.add_option('-d', '--dest', dest='dest', action='store', default=None, help='Where the bundle will be created')
    opt_parser.add_option('-p', '--placetypes', dest='placetypes', action='store', default=None, help='One or more placetype to bundle. Default are placetypes whose roles are one of: common; common_optional; optional')
    opt_parser.add_option('-S', '--suffix', dest='suffix', action='store', default='', help='Append this suffix to the bundle name')
    opt_parser.add_option('-n', '--name-template', dest='name_template', action='store', default=None, help='Apply this (Python string) template to each placetype in order to generate the bundle name')

    # see below
    # opt_parser.add_option('-r', '--roles', dest='roles', action='store', default=None, help='')

    opt_parser.add_option('--wof-clone', dest='clone', action='store', default=None, help='')
    opt_parser.add_option('--aws-creds', dest='aws_creds', action='store', default=None, help='')
    opt_parser.add_option('--aws-bucket', dest='aws_bucket', action='store', default=None, help='')

    opt_parser.add_option('-f', '--force', dest='force', action='store_true', default=False, help='For a bundle to be created even if the local and remote meta files are the same (default is False)')
    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is False)')

    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    kwargs = {
        'source': options.source,
        'dest': options.dest,
        'clone': options.clone,
        'aws_creds': options.aws_creds,
        'aws_bucket': options.aws_bucket,
        'force': options.force,
    }

    bdl = mapzen.whosonfirst.bundles.bundler(**kwargs)

    # PLEASE PUT ME IN A LIBRARY... (20160127/thisisaaronland)

    def placetypes(options):

        if options.placetypes:

            placetypes = options.placetypes.split(",")

            for pt in placetypes:
                pt = pt.strip()

                if not mapzen.whosonfirst.placetypes.is_valid_placetype(pt):
                    logging.warning("%s is not a valid placetype, skipping")
                    continue

                yield pt

        # TO DO options.roles

        else:

            for pt in mapzen.whosonfirst.placetypes.with_roles(['common', 'common_optional', 'optional']):
                yield pt
    
    iter = placetypes(options)

    for pt in iter:

        # See notes above the mapzen.whosonfirst.bundles.bundle code
        # (20160607/thisisaaronland)

        name = pt

        if options.name_template:
            name = options.name_template % name

        logging.info("bundle %s (%s)" % (name, options.suffix))

        # TO DO: threads?

        bdl.bundle(pt, name, suffix=options.suffix)
